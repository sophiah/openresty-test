lua_package_path "/opt/openresty/modules/?.luac;;";

log_format std_log '$remote_addr - - [$time_local]  '
                    '"$request" $status $body_bytes_sent '
                    '"$http_referer" "$http_user_agent" $request_time';

log_format cache_log '[$time_local] $cacheKey $cacheStatus $request_time';

upstream cache {
    hash $http_x_cache_Key consistent;

    server cache1:9000;
    server cache2:9000;
    server cache3:9000;
}

upstream minio_s3 {
   least_conn;
   server minio:9000;
}
resolver 127.0.0.11 ipv6=off;

lua_shared_dict cache_dict 100m;

init_by_lua_block {
    awsAuth = require 'aws_auth';
    awsAuth.load_cred("minioadmin", "minioadmin");
    -- awsAuth.verbose()
}

lua_shared_dict healthcheck 1m;
init_worker_by_lua_block {
    local hc = require "healthcheck"
    local ok, err = hc.spawn_checker{
            shm = "healthcheck",  -- defined by "lua_shared_dict"
            upstream = "cache",   -- defined by "upstream"
            type = "http",        -- support "http" and "https"

            http_req = "GET /status HTTP/1.0\r\nHost: foo.com\r\n\r\n",

            interval = 2000,
            timeout = 1000,
            fall = 3,  -- # of successive failures before turning a peer down
            rise = 2,  -- # of successive successes before turning a peer up
            valid_statuses = {200, 302}, 
            concurrency = 10,  -- concurrency level for test requests
            ssl_verify = false,
        }
        if not ok then
            ngx.log(ngx.ERR, "failed to spawn health checker: ", err)
            return
        end
}

error_log /dev/stdout debug;

server {
    listen       80;
    server_name  localhost;

    access_log /dev/stdout std_log;

    # limit the size
    client_max_body_size 100M;

    proxy_connect_timeout 300;
    # Default is HTTP/1, keepalive is only enabled in HTTP/1.1
    proxy_http_version 1.1;
    proxy_set_header Host $http_host;
    chunked_transfer_encoding off;

    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/local/openresty/nginx/html;
    }

    location = /status {
        content_by_lua_block {
            ngx.status = 200
            ngx.say("OK");
            ngx.exit(ngx.OK)
        }
    }

    # object level
    location ~* /([^/]+)/(.*)  {
        set $dest http://minio_s3;

        if ($request_method = GET ) {
            access_by_lua_block {
                local cacheKey = awsAuth.revalidate()
                if cacheKey ~= "" then
                    ngx.req.set_header("X-Cache-Key", cacheKey);
                    ngx.var.dest="http://cache";
                end
            }
        }

        proxy_pass $dest;
    }


    # cluster, bucket level
    location ~* /([^/]*) {
        proxy_pass http://minio_s3;
    }
}


# cache
server {
    listen 9000;

    access_log /dev/stdout cache_log;

    proxy_connect_timeout 300;
    # Default is HTTP/1, keepalive is only enabled in HTTP/1.1
    proxy_http_version 1.1;
    proxy_set_header Host $http_host;

    location = /status {
        set $cacheStatus "-";
        set $cacheKey "/status";
        content_by_lua_block {
            ngx.status = 200
            ngx.say("OK");
            ngx.exit(ngx.OK)
        }
    }

    location / {
        set $cacheStatus "-";
        set $cacheKey "";
        if ($request_method = GET ) {
            access_by_lua_block {
                ngx.var.cacheKey = ngx.req.get_headers()["X-Cache-Key"]
                if ( ngx.var.cacheKey and ngx.var.cacheKey ~= "" ) then
                    local cache_value = ngx.shared.cache_dict:get(ngx.var.cacheKey)
                    if cache_value and cache_value ~= "" then
                        ngx.print(cache_value)
                        ngx.var.cacheStatus = "HIT"
                        ngx.exit(ngx.HTTP_OK)
                        return
                    else
                        ngx.var.cacheStatus = "MISS"
                    end
                else
                    ngx.var.cacheStatus = "PASS"
                end
            }

            body_filter_by_lua_block {
                if ngx.var.cacheKey and ngx.var.cacheKey ~= "" and ngx.var.cacheStatus == "MISS" then
                    local chunk, eof = ngx.arg[1], ngx.arg[2]

                    local body = ngx.ctx.body or ""
                    body = body .. (chunk or "")

                    ngx.ctx.body = body

                    if eof then
                        ngx.shared.cache_dict:set(ngx.var.cacheKey, body)
                    end
                end
            }
        }

        proxy_set_header Host $http_host;
        proxy_http_version 1.1;
        # https://gitlab.com/gitlab-org/omnibus-gitlab/-/issues/7480
        proxy_cache_convert_head off;
        proxy_pass http://minio_s3;
    }
}
