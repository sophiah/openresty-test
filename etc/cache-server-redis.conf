lua_package_path "/opt/openresty/modules/?.luac;;";

log_format std_log '$remote_addr - - [$time_local]  '
                    '"$request" $status $body_bytes_sent '
                    '"$http_referer" "$http_user_agent"';

upstream minio_s3 {
   least_conn;
   server minio:9000;
}
resolver 127.0.0.1 ipv6=off;

lua_shared_dict cache_dict 100m;

init_by_lua_block {
    awsAuth = require 'aws_auth';
    awsAuth.load_cred("minioadmin", "minioadmin");
    -- awsAuth.verbose()
}

error_log /dev/stdout debug;

server {
    listen       80;
    server_name  localhost;

    access_log /dev/stdout std_log;
    client_max_body_size 100M;

    proxy_set_header Host $http_host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header X-NginX-Proxy true;

    proxy_connect_timeout 300;
    # Default is HTTP/1, keepalive is only enabled in HTTP/1.1
    proxy_http_version 1.1;
    chunked_transfer_encoding off;

    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/local/openresty/nginx/html;
    }

    location = /status {
        content_by_lua_block {
            ngx.status = 200
            ngx.say("OK");
            ngx.exit(ngx.OK)
        }
    }

    # object level
    location ~* /([^/]+)/(.*)  {
        set $formCache "0";
        set $cacheKey "";

        if ($request_method = GET ) {
            access_by_lua_block {
                ngx.var.cacheKey = awsAuth.revalidate()
                if ( ngx.var.cacheKey and ngx.var.cacheKey ~= "" ) then
                    local cache_value = ngx.shared.cache_dict:get(ngx.var.cacheKey)
                    if cache_value and cache_value ~= "" then
                        ngx.say(cache_value)
                        return
                    else
                    end
                end
            }
        }

        proxy_pass http://minio_s3;
    }


    # cluster, bucket level
    location ~* /([^/]*) {
        proxy_pass http://minio_s3;
    }
}

