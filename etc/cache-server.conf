lua_package_path "/opt/openresty/modules/?.luac;;";

log_format cache_st '$remote_addr - $upstream_cache_status [$time_local]  '
                    '"$request" $status $body_bytes_sent '
                    '"$http_referer" "$http_user_agent"';

proxy_cache_path /opt/openresty/cache levels=1:2 use_temp_path=off keys_zone=STATIC:200m inactive=24h max_size=1g;

upstream minio_s3 {
   least_conn;
   server proxy:8001;
}

init_by_lua_block {
    awsAuth = require 'aws_auth';
    awsAuth.load_cred("minioadmin", "minioadmin");
    awsAuth.verbose()
}

error_log /opt/openresty/error.log debug;
access_log /dev/stdout cache_st;

server {
    listen       80;
    server_name  localhost;

    client_max_body_size 100M;

    proxy_set_header Host $http_host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header X-NginX-Proxy true;

    proxy_connect_timeout 300;
    # Default is HTTP/1, keepalive is only enabled in HTTP/1.1
    proxy_http_version 1.1;
    chunked_transfer_encoding off;

    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/local/openresty/nginx/html;
    }

    location = /status {
        content_by_lua_block {
            ngx.status = 200
            ngx.say("OK");
            ngx.exit(ngx.OK)
        }
    }

    # get object
    location ~* /([^/]+)/(.*)  {
        set $skip_cache 1;
        set $cache_key "";

        if ($request_method = GET ) {
            access_by_lua_block {
                local cacheKey = awsAuth.revalidate()
                if ( cacheKey ~= "" ) then
                    ngx.var.skip_cache = 0;
                    ngx.var.cache_key = cacheKey;
                end
            }
        }

        add_header X-Cache-Status $upstream_cache_status;
        proxy_pass http://minio_s3;
        # preserve headers
        proxy_http_version 1.1;
        # proxy_pass_header Range;
        # https://gitlab.com/gitlab-org/omnibus-gitlab/-/issues/7480
        proxy_cache_convert_head off;
        proxy_set_header Host $http_host;
        proxy_pass_header Authorization;
        proxy_pass_header Method;

        proxy_cache_methods GET;
        proxy_cache STATIC;
        proxy_cache_valid 200 1h;
        proxy_cache_key $cache_key;
        proxy_no_cache $skip_cache;
    }

    # cluster, bucket level
    location ~* /([^/]*) {
        proxy_pass http://minio_s3;
    }
}
