lua_package_path "/opt/openresty/modules/?.luac;;";

log_format std_log '$remote_addr - - [$time_local]  '
                    '"$request" $status $body_bytes_sent '
                    '"$http_referer" "$http_user_agent"';

log_format cache_log '[CACHE-$upstream_cache_status] "$http_x_cache_key" "$request"';

proxy_cache_path /opt/openresty/cache levels=1:2 use_temp_path=off keys_zone=STATIC:200m inactive=24h max_size=1g;

upstream cache {
    hash $http_x_cache_Key consistent;

    keepalive 16;
    zone my_upstream_zone 64k;
    server cache1:9000 max_fails=1 fail_timeout=3s;
    server cache2:9000 max_fails=1 fail_timeout=3s;
    server cache3:9000 max_fails=1 fail_timeout=3s;
}

upstream minio_s3 {
   least_conn;
   server minio:9000;
}

init_by_lua_block {
    awsAuth = require 'aws_auth';
    awsAuth.load_cred("minioadmin", "minioadmin");
    awsAuth.verbose()
}

error_log /opt/openresty/error.log debug;

server {
    listen       80;
    server_name  localhost;

    access_log /dev/stdout std_log;
    client_max_body_size 100M;

    proxy_set_header Host $http_host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header X-NginX-Proxy true;

    proxy_connect_timeout 300;
    # Default is HTTP/1, keepalive is only enabled in HTTP/1.1
    proxy_http_version 1.1;
    chunked_transfer_encoding off;

    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/local/openresty/nginx/html;
    }

    location = /status {
        content_by_lua_block {
            ngx.status = 200
            ngx.say("OK");
            ngx.exit(ngx.OK)
        }
    }

    # get object
    location ~* /([^/]+)/(.*)  {
        set $dest http://minio_s3;

        if ($request_method = GET ) {
            access_by_lua_block {
                local cacheKey = awsAuth.revalidate()
                if ( cacheKey ~= "" ) then
                    ngx.req.set_header("X-Cache-Key", cacheKey);
                    ngx.var.dest="http://cache";
                end
            }
        }

        proxy_pass $dest;
    }

    # cluster, bucket level
    location ~* /([^/]*) {
        proxy_pass http://minio_s3;
    }
}

# cache
server {
    listen 9000;

    access_log /dev/stdout cache_log;
    location / {

        proxy_set_header Host $http_host;
        proxy_http_version 1.1;

        # https://gitlab.com/gitlab-org/omnibus-gitlab/-/issues/7480
        proxy_cache_convert_head off;

        proxy_buffering on;
        proxy_cache_methods GET;
        proxy_cache_valid 200 1h;
        proxy_cache_key "$http_x_cache_key";
        proxy_cache STATIC;
        proxy_no_cache 0;

        proxy_set_header Accept-Encoding "";
        proxy_ignore_headers Expires;
        proxy_ignore_headers X-Accel-Expires;
        proxy_ignore_headers Cache-Control;
        proxy_ignore_headers Set-Cookie;
        
        proxy_hide_header Expires;
        proxy_hide_header X-Accel-Expires;
        proxy_hide_header Cache-Control;
        proxy_hide_header Set-Cookie;

        add_header X-Cache-Status $upstream_cache_status;
        proxy_pass http://minio_s3;
    }
}
